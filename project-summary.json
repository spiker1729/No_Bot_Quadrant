{
  "project": {
    "name": "Impact Analysis Tool",
    "description": "A sophisticated code analysis platform that helps developers understand the ripple effects of code changes in large repositories",
    "version": "1.0.0",
    "type": "Full-Stack Web Application",
    "license": "MIT",
    "status": "Production Ready"
  },
  "architecture": {
    "type": "Microservices",
    "components": {
      "backend": {
        "framework": "FastAPI",
        "language": "Python 3.13.7",
        "server": "Uvicorn",
        "port": 8000,
        "api_docs": "/docs",
        "features": [
          "RESTful API",
          "Automatic OpenAPI documentation",
          "Type safety with Pydantic",
          "Async/await support",
          "Hot reload in development"
        ]
      },
      "frontend": {
        "framework": "React 18",
        "language": "TypeScript",
        "build_tool": "Vite",
        "port": 3001,
        "features": [
          "Hot module replacement",
          "Type-safe development",
          "Modern ES modules",
          "Responsive design",
          "Interactive visualizations"
        ]
      },
      "databases": {
        "graph_db": {
          "name": "Neo4j",
          "port": 7687,
          "browser_port": 7474,
          "purpose": "Store code relationships and dependencies"
        },
        "vector_db": {
          "name": "Qdrant",
          "port": 6333,
          "purpose": "Semantic search and embeddings"
        }
      }
    }
  },
  "features": {
    "core_capabilities": [
      {
        "name": "Repository Ingestion",
        "description": "Clone and analyze public GitHub repositories",
        "supported_formats": [
          "https://github.com/owner/repo",
          "github.com/owner/repo",
          "owner/repo"
        ]
      },
      {
        "name": "Interactive Graph Visualizations",
        "description": "Multiple layout algorithms for dependency visualization",
        "layouts": [
          {
            "name": "Spider Web",
            "algorithm": "fcose",
            "use_case": "Complex dependency networks"
          },
          {
            "name": "Force Directed",
            "algorithm": "cola",
            "use_case": "Natural clustering"
          },
          {
            "name": "Circle",
            "algorithm": "circle",
            "use_case": "Circular arrangement"
          },
          {
            "name": "Tree",
            "algorithm": "breadthfirst",
            "use_case": "Hierarchical structure"
          }
        ]
      },
      {
        "name": "Code Dependency Analysis",
        "description": "Understand relationships between files, functions, and classes",
        "supported_languages": [
          "Python",
          "TypeScript",
          "JavaScript",
          "Java",
          "Go",
          "Rust",
          "C++"
        ]
      },
      {
        "name": "AI-Powered Q&A",
        "description": "Ask questions about codebase with context-aware responses",
        "features": [
          "Natural language queries",
          "Code context awareness",
          "Repository-specific insights"
        ]
      }
    ],
    "visualization_features": [
      "Interactive zoom and pan",
      "Node hover effects",
      "Selection highlighting",
      "Layout switching",
      "Fit to screen",
      "Responsive design",
      "Black text for readability",
      "Color-coded node types"
    ]
  },
  "tech_stack": {
    "backend": {
      "core_dependencies": {
        "fastapi": ">=0.104.0",
        "uvicorn": ">=0.24.0",
        "pydantic": ">=2.5.0",
        "pydantic-settings": ">=2.1.0"
      },
      "database_clients": {
        "neo4j": ">=5.15.0",
        "qdrant-client": ">=1.7.0"
      },
      "code_analysis": {
        "tree-sitter": ">=0.20.0",
        "tree-sitter-python": ">=0.20.0",
        "tree-sitter-javascript": ">=0.20.0",
        "tree-sitter-typescript": ">=0.20.0",
        "tree-sitter-java": ">=0.20.0",
        "tree-sitter-go": ">=0.20.0",
        "tree-sitter-rust": ">=0.20.0",
        "tree-sitter-cpp": ">=0.20.0"
      },
      "ai_ml": {
        "openai": ">=1.3.0",
        "tiktoken": ">=0.5.0"
      },
      "utilities": {
        "gitpython": ">=3.1.40",
        "httpx": ">=0.25.0",
        "orjson": ">=3.9.0",
        "tenacity": ">=8.2.0",
        "python-multipart": ">=0.0.6",
        "python-dotenv": ">=1.0.0"
      }
    },
    "frontend": {
      "core_dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "typescript": "^5.2.2",
        "vite": "^4.5.0"
      },
      "visualization": {
        "cytoscape": "^3.26.0",
        "cytoscape-fcose": "^2.2.0",
        "cytoscape-cola": "^2.5.1",
        "cytoscape-cose-bilkent": "^4.1.0"
      },
      "styling": {
        "tailwindcss": "^3.3.5",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0"
      },
      "utilities": {
        "axios": "^1.6.0",
        "lucide-react": "^0.294.0"
      }
    }
  },
  "setup_instructions": {
    "prerequisites": {
      "python": "3.10+",
      "node": "18+",
      "git": "latest",
      "docker": "latest (for containerized setup)",
      "memory": "4GB+ RAM recommended"
    },
    "local_development": {
      "steps": [
        {
          "step": 1,
          "description": "Clone repository",
          "commands": [
            "git clone <repository-url>",
            "cd impact-analysis-tool"
          ]
        },
        {
          "step": 2,
          "description": "Setup backend",
          "commands": [
            "python -m venv venv",
            "source venv/bin/activate",
            "pip install -r backend/requirements.txt",
            "cd backend",
            "python -m uvicorn src.impact_analysis.main:app --reload --host 0.0.0.0 --port 8000"
          ]
        },
        {
          "step": 3,
          "description": "Setup frontend",
          "commands": [
            "cd frontend",
            "npm install",
            "npm run dev"
          ]
        }
      ],
      "access_points": {
        "frontend": "http://localhost:3001",
        "backend_api": "http://localhost:8000",
        "api_docs": "http://localhost:8000/docs"
      }
    },
    "docker_compose": {
      "steps": [
        {
          "step": 1,
          "description": "Start all services",
          "commands": ["docker compose up -d --build"]
        }
      ],
      "access_points": {
        "frontend": "http://localhost:3000",
        "backend_api": "http://localhost:8000",
        "api_docs": "http://localhost:8000/docs",
        "neo4j_browser": "http://localhost:7474",
        "qdrant_dashboard": "http://localhost:6333/dashboard"
      }
    }
  },
  "api_endpoints": {
    "repository": {
      "ingest": {
        "method": "POST",
        "path": "/api/ingest_repo",
        "description": "Clone and ingest a GitHub repository",
        "request_body": {
          "repo_url": "string (GitHub repository URL)"
        }
      }
    },
    "graph": {
      "get_node_graph": {
        "method": "GET",
        "path": "/api/graph/{node_id}",
        "description": "Get dependency graph for specific node"
      },
      "list_nodes": {
        "method": "POST",
        "path": "/api/graph/list_nodes",
        "description": "List available nodes in repository",
        "request_body": {
          "repo_path": "string"
        }
      },
      "full_graph": {
        "method": "POST",
        "path": "/api/graph/full",
        "description": "Get full repository graph with relationships",
        "request_body": {
          "repo_path": "string"
        }
      },
      "repo_tree": {
        "method": "POST",
        "path": "/api/graph/repo_tree",
        "description": "Get repository tree structure",
        "request_body": {
          "repo_path": "string",
          "max_nodes": "number (optional)"
        }
      }
    },
    "analysis": {
      "diff_analysis": {
        "method": "POST",
        "path": "/api/analyze_diff",
        "description": "Analyze impact of code changes",
        "request_body": {
          "repo_path": "string",
          "diff_text": "string"
        }
      },
      "ask_questions": {
        "method": "POST",
        "path": "/api/ask",
        "description": "Ask questions about codebase",
        "request_body": {
          "question": "string",
          "repo_path": "string",
          "context_ids": "array (optional)"
        }
      }
    }
  },
  "usage_guide": {
    "repository_ingestion": [
      "Navigate to Ingest Repo tab",
      "Enter GitHub repository URL",
      "Click Ingest Repository",
      "Wait for processing completion"
    ],
    "graph_visualization": [
      "Go to View Graph tab",
      "Select a node from the list",
      "Click Load Graph",
      "Use layout buttons to switch visualization styles"
    ],
    "full_repository_graph": [
      "Go to Full Graph tab",
      "View complete repository structure",
      "Switch between layout algorithms",
      "Use Fit button to center graph"
    ],
    "interactive_features": [
      "Zoom: Mouse wheel or pinch gestures",
      "Pan: Click and drag empty space",
      "Select: Click on nodes to highlight",
      "Hover: Hover over nodes for visual feedback"
    ]
  },
  "current_status": {
    "backend": {
      "status": "Running",
      "port": 8000,
      "health_check": "http://localhost:8000/docs"
    },
    "frontend": {
      "status": "Running", 
      "port": 3001,
      "health_check": "http://localhost:3001"
    },
    "features_implemented": [
      "Repository ingestion",
      "Graph visualization with multiple layouts",
      "Interactive controls",
      "Node and edge styling",
      "API documentation",
      "Error handling",
      "Responsive design"
    ],
    "features_in_progress": [
      "Advanced diff analysis",
      "Enhanced AI-powered Q&A",
      "Real-time collaboration"
    ]
  },
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "Backend 404 errors",
        "solution": "Ensure API endpoints use /api/ prefix"
      },
      {
        "issue": "Python not found",
        "solution": "Activate virtual environment with 'source venv/bin/activate'"
      },
      {
        "issue": "Frontend port conflicts",
        "solution": "Frontend auto-selects available ports (3001, 3002, etc.)"
      },
      {
        "issue": "Graph not rendering",
        "solution": "Check browser console for JavaScript errors, use Fit button"
      },
      {
        "issue": "Docker port conflicts",
        "solution": "Ensure ports 3000, 6333, 7474, 7687, 8000 are available"
      }
    ],
    "performance_optimization": [
      "For large repositories: Increase max_nodes limit gradually",
      "Monitor RAM usage with large graphs",
      "Ensure stable internet for repository cloning"
    ]
  },
  "development": {
    "backend_commands": {
      "install_deps": "pip install -r backend/requirements.txt",
      "run_tests": "python -m pytest",
      "format_code": "black src/ && isort src/",
      "type_check": "mypy src/"
    },
    "frontend_commands": {
      "install_deps": "npm install",
      "dev_server": "npm run dev",
      "build": "npm run build",
      "lint": "npm run lint"
    }
  },
  "file_structure": {
    "root": [
      "README.md",
      "docker-compose.yml",
      "Makefile"
    ],
    "backend": [
      "requirements.txt",
      "pyproject.toml", 
      "Dockerfile",
      "src/impact_analysis/",
      "scripts/",
      "tests/"
    ],
    "frontend": [
      "package.json",
      "tsconfig.json",
      "vite.config.js",
      "tailwind.config.js",
      "src/",
      "public/"
    ],
    "infrastructure": [
      "infra/neo4j/",
      "infra/qdrant/"
    ]
  },
  "recent_improvements": {
    "graph_visualization": [
      "Added spider web layout using fcose algorithm",
      "Implemented multiple layout options",
      "Added interactive controls",
      "Improved node and edge styling",
      "Added black text for better readability"
    ],
    "backend_enhancements": [
      "Enhanced graph endpoints with meaningful data",
      "Added relationship detection between files",
      "Improved error handling",
      "Added comprehensive API documentation"
    ],
    "documentation": [
      "Complete README.md rewrite",
      "Added setup instructions",
      "API reference documentation", 
      "Troubleshooting guide",
      "Usage examples"
    ]
  }
}
